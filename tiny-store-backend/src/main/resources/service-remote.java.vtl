package ${service.interfacePackage};

import jakarta.annotation.ManagedBean;
import jakarta.annotation.security.PermitAll;
import jakarta.ejb.Remote;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;

import js.transaction.Immutable;
import js.transaction.Mutable;
import js.transaction.Transactional;
#if(!$service.imports.empty)

#foreach($import in $service.imports)
import ${import};
#end
#end

/**
 * ${service.implementationName} remote interface.
#if($service.description)
 * 
 * ${service.description}
#end 
 */
@ManagedBean
@ApplicationScoped
@Remote
@PermitAll
@Produces("application/json")
#if($service.restPath)
@Path("/${service.restPath}")
#end
@Transactional(schema = "${service.repositoryName}")
@Immutable
public interface ${service.interfaceName} {
#foreach($operation in $service.operations)

	/**
#if($operation.description)	
	 * ${operation.description}
	 *
#end	 
#foreach($param in $operation.parameters)
	 * @param ${param.name}#if($param.description) ${param.description}#end#if($foreach.hasNext),#else.#end
	 
#end
#if($operation.value.description)	 
	 * @return ${operation.value.description}.
#end
#foreach($exception in $operation.exceptions)
	 * @throws ${exception.type} if ${exception.cause}.
#end
	 */
	@${operation.restMethod}
#if($operation.restPath or $operation.pathParam)	
	@Path("#if($operation.restPath)/${operation.restPath}#end#foreach($param in $operation.parameters)#if($param.pathParam)/{${param.name}}#end#end")
#end	
#if($operation.entityParam)
	@Consumes("application/json")
#end	
#if($operation.dataOpcode != "READ")
	@Mutable
#end
	${operation.value.type}#*
	*# ${operation.name}(#foreach($param in $operation.parameters)#if(!$param.entityParam)@PathParam("${param.name}")#*
	*# #end$param.type $param.name#if($foreach.hasNext), #end#end)#*
	*##if(!$operation.exceptions.empty) throws #foreach($exception in $operation.exceptions)${exception.type}#if($foreach.hasNext), #end#end#end;
#end

}